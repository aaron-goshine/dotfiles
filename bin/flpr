#!/usr/bin/env python3
"""
Flipper is a simple string encryption and decryption program.

Positional arguments:
  STRING             String of characters to process

Optional arguments:
  -h, --help         Show this help message and exit
  -c, --clip         Process content of clipboard, use with care
  -k KEY, --key KEY  Encryption key (default: uses text content in ~/.flprc)
  -s, --silent       Stop printing to standard out

AUTHORS:
    Aaron Goshine, Robert Merriman
DATE:
    Feb 2017
"""

import sys
import os
import argparse
import base64
import hashlib
from cryptography.fernet import Fernet

def get_clipboard_data():
    try:
        from tkinter import Tk
        root = Tk()
        root.withdraw()
        return root.clipboard_get()
    except Exception as e:
        print(f"Error accessing clipboard: {e}")
        sys.exit(1)

def set_clipboard_data(data):
    try:
        from tkinter import Tk
        root = Tk()
        root.withdraw()
        root.clipboard_clear()
        root.clipboard_append(data)
        root.update() # now it stays on the clipboard after the window is closed
        print('\nClipboard updated!\n')
    except Exception as e:
        print(f"Error updating clipboard: {e}")
        sys.exit(1)

def key_gen(key):
    if key:
      passphrase = key.encode()  # Encode the passphrase to bytes
      # Use SHA-256 hash function to hash the passphrase
      hashed_passphrase = hashlib.sha256(passphrase).digest()
      # Fernet keys need to be 32 bytes long, so we take the first 32 bytes of the SHA-256 hash
      # Then, encode the key using URL-safe Base64
      return base64.urlsafe_b64encode(hashed_passphrase[:32])
    try:
        with open(os.path.join(os.path.expanduser('~'), '.flprc')) as file_handle:
            content = file_handle.readlines()
        if content:
            return Fernet.generate_key()
    except IOError:
        print('\nPlease use the -k [KEY] switch, or create ~/.flprc with a key\n')
        sys.exit(1)

def encode_string(chars, key):
    fernet = Fernet(key)
    return fernet.encrypt(chars.encode()).decode()

def decode_cipher(chars, key):
    fernet = Fernet(key)
    try:
        return fernet.decrypt(chars.encode()).decode()
    except Exception:
        print('\nYour cipher is corrupted or your key does not match!\n')
        sys.exit(1)

def process_string(args):
  
    key = key_gen(args.key)
    print("======>")  
    print(args.key, key)
    print("======>")

    if not args.chars:
        chars = get_clipboard_data()
    else:
        chars = args.chars

    if chars[-2:] == '==':
        result = decode_cipher(chars, key)
    else:
        result = encode_string(chars, key)

    if not args.silent:
        print("\n" + result + "\n")
    if args.clip:
        set_clipboard_data(result)

def main():
    parser = argparse.ArgumentParser(description='Encrypt or decrypt a string.')
    parser.add_argument('-c', '--clip', action='store_true', help='Process content of clipboard, use with care')
    parser.add_argument('-k', '--key', type=str, help='Encryption key (default: uses text content in ~/.flprc as key)')
    parser.add_argument('-s', '--silent', action='store_true', help='Stop printing to standard out')
    parser.add_argument('chars', metavar='STRING', type=str, nargs='?', help='String of characters to process')
    args = parser.parse_args()
    process_string(args)

if __name__ == "__main__":
    main()
  