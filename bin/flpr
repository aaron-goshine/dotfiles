#!/usr/bin/python
import sys
import os
import subprocess
import argparse


def get_clipboard_data():
    p = subprocess.Popen(['pbpaste'], stdout=subprocess.PIPE)
    retcode = p.wait()
    data = p.stdout.read()
    return data


def set_clipboard_data(data):
    p = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
    p.stdin.write(data)
    p.stdin.close()
    retcode = p.wait()


def key_gen(key):
    if key:
        return abs(hash(''.join(key)))

    with open(os.path.join(os.path.expanduser('~'), '.flprc')) as f:
        content = f.readlines()
    if content:
        key = abs(hash(''.join(content)))
    return key


def role_up(chars, key):
    charsList = list(chars)
    rs = ''
    for i in range(len(charsList)):
        charsList[i] = hex(ord(charsList[i]) ^ ((i << 8) + key))
    rs = ''.join(charsList)
    return rs.replace('0x', 'r') + "=="


def role_out(chars, key):
    chars = chars.replace('=', '')
    hexico = chars.split('r')[1:]
    charsList = []
    for i in range(len(hexico)):
        hx = hexico[i]
        try:
            hexico[i] = chr(int('0x' + hx, 16) ^ ((i << 8) + key))
        except:
            raise Exception('You cipher is corrupted or your key does not match!')

    return ''.join(hexico)


def main(args):
    key = key_gen(args.key)
    chars = args.chars
    if args.clip:
        chars = get_clipboard_data()

    if len(chars) > 0 and chars[-2:] == '==':
        cipher = role_out(chars, key)
    else:
        cipher = role_up(chars, key)
    set_clipboard_data(cipher)

    if not args.silent:
        print(cipher)
        if not args.quiet:
            print('Clipboard updated!')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Encrypts or decrypt a string')

    parser.add_argument('-c', '--clip',
                        dest='clip',
                        action='store_true',
                        help='Process content of clip, use with care')

    parser.add_argument('-k', '--key',
                        dest='key',
                        type=str,
                        help='Encryption key (default: uses text content in (~/.flprc) as key)')

    parser.add_argument('-s', '--silent',
                        dest='silent',
                        action='store_true',
                        help='stop print to standard out')

    parser.add_argument('-q', '--quiet',
                        dest='quiet',
                        action='store_true',
                        help='Stop printing progress of excecution')

    parser.add_argument('chars',
                        metavar='STRING',
                        type=str,
                        help='A string of characters or to process')

    args = parser.parse_args()
    main(args)
